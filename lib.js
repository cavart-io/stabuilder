// Generated by CoffeeScript 2.2.4
var assign, build, cleanIndexNames, composeMenu, dive, execSync, fileProps, fm, fs, global, globalObj, linkMenu, listFiles, mdwrapper, outdir, parseFM, path, prepareMD, pretty, pug, readFile, render, run, sortBy, srcdir, writeHtml;

({execSync} = require('child_process'));

fs = require('fs');

fm = require('front-matter');

path = require('path');

pug = require('pug');

dive = require('diveSync');

srcdir = './src/pages';

outdir = './out';

pretty = 0;

global = {};

mdwrapper = fs.readFileSync("./src/mdwrapper.pug", 'utf-8');

run = function(cmd) {
  return execSync(cmd);
};

listFiles = function(dir = './', list = []) {
  dive(dir, (err, filename) => {
    return list[list.length] = {filename};
  });
  return list;
};

assign = function(action) {
  return function(item) {
    return Object.assign(item, action(item));
  };
};

sortBy = function(property, desc) {
  return function(a, b) {
    return (a[property] > b[property]) ^ desc;
  };
};

fileProps = (item, parts = item.filename.match(/(\w+)\/(\w+)\.(\w+)/i)) => {
  return {
    fileclass: parts[1],
    outfile: parts[2],
    filetype: parts[3]
  };
};

cleanIndexNames = (item) => {
  return {
    outfile: item.outfile === 'index' ? '' : item.outfile
  };
};

readFile = (item) => {
  return {
    content: fs.readFileSync(item.filename, 'utf-8')
  };
};

parseFM = (item) => {
  return fm(item.content);
};

globalObj = () => {
  return {global};
};

prepareMD = (item) => {
  return {
    body: item.filetype !== 'md' ? item.body : `${mdwrapper}\n${item.body.replace(/^/gm, '    ')}`
  };
};

render = (item) => {
  return {
    html: pug.render(item.body, item)
  };
};

linkMenu = (item) => {
  return item.attributes.menu && Object.assign(item.attributes.menu, {
    path: `/${item.outfile}`
  });
};

composeMenu = (item) => {
  var base;
  return item.attributes.menu && ((base = item.global).menu != null ? base.menu : base.menu = []).push(item.attributes.menu);
};

writeHtml = (item) => {
  var dir, file;
  dir = path.join(outdir, item.outfile);
  file = path.join(dir, 'index.html');
  run(`mkdir -p ${dir}`);
  fs.writeFileSync(file, item.html);
  return console.log(`- ${file}`);
};

build = function() {
  var list;
  //run "rm -rf #{outdir}"
  list = listFiles(srcdir).filter(function(item) {
    return !item.filename.includes('README');
  });
  list.map(assign(fileProps));
  list.map(assign(cleanIndexNames));
  list.map(assign(readFile));
  list.map(assign(parseFM));
  list.map(assign(globalObj));
  list.map(linkMenu);
  list.map(composeMenu);
  // return console.log global
  global.menu.sort(sortBy('order'));
  list.map(assign(prepareMD));
  list.map(assign(render));
  return list.map(writeHtml);
};

module.exports = {build};
